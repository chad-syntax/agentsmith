-- Organization Users Table
create table organization_users (
    id bigint generated by default as identity not null primary key,
    organization_id bigint references organizations(id) not null,
    user_id bigint references agentsmith_users(id) not null,
    role organization_user_role not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now(),
    unique (organization_id, user_id)
);

-- Indexes
create index on organization_users(organization_id);
create index on organization_users(user_id);
create index on organization_users(role);
create index on organization_users(created_at);

-- RLS
alter table organization_users enable row level security;

-- Helper Functions for RLS
create or replace function is_organization_member(org_id bigint)
returns boolean
language sql
security definer
set search_path = ''
as $$
  select exists (
    select 1 from public.organization_users ou
    where ou.organization_id = org_id
    and ou.user_id = public.agentsmith_user_id()
  );
$$;

create or replace function is_organization_admin(org_id bigint)
returns boolean
language sql
security definer
set search_path = ''
as $$
  select exists (
    select 1 from public.organization_users
    where organization_id = org_id
    and user_id = public.agentsmith_user_id()
    and role = 'ADMIN'
  );
$$;

-- Policies
create policy "organization users select"
    on organization_users for select
    to authenticated
    using (is_organization_member(organization_id));

create policy "organization users insert"
    on organization_users for insert
    to authenticated
    with check (is_organization_admin(organization_id));

create policy "organization users update"
    on organization_users for update
    to authenticated
    using (is_organization_admin(organization_id));

create policy "organization users delete"
    on organization_users for delete
    to authenticated
    using (is_organization_admin(organization_id));

create policy "Users can view organization members if they are a member"
    on organization_users for select
    to authenticated
    using (is_organization_member(organization_id));

create policy "Users can view organizations they are members of"
    on organizations for select
    to authenticated
    using (is_organization_member(id));

-- Triggers
create trigger trigger_updated_at_organization_users
    before update on organization_users
    for each row
    execute function set_updated_at(); 

-- Auto-create agentsmith_users record, default organization, and default project when auth.users record is created
create or replace function create_agentsmith_user()
returns trigger
language plpgsql
security definer
set search_path = ''
as $$
declare
  var_agentsmith_user_id bigint;
  var_organization_id bigint;
begin
    -- create the agentsmith_users record
    insert into public.agentsmith_users (auth_user_id, email)
    values (new.id, new.email)
    returning id into var_agentsmith_user_id;

    -- create the default organization
    insert into public.organizations (name, tier, created_by)
    values ('Default Organization', 'FREE', var_agentsmith_user_id)
    returning id into var_organization_id;

    -- create the default organization user
    insert into public.organization_users (organization_id, user_id, role)
    values (var_organization_id, var_agentsmith_user_id, 'ADMIN');

    -- create the default project
    insert into public.projects (organization_id, name, created_by)
    values (var_organization_id, 'Default Project', var_agentsmith_user_id);

    return new;
end;
$$;

-- note: this seems to not get created via the diff tool, must be because auth is a protected schema
create trigger trigger_create_agentsmith_user
    after insert on auth.users
    for each row
    execute function create_agentsmith_user(); 

-- Helper Function for RLS to view users in the same organization
create or replace function is_member_of_same_org(agentsmith_user_id bigint)
returns boolean
language sql
security definer
set search_path = ''
as $$
select exists (
    select 1 from public.organization_users ou
    where ou.user_id = agentsmith_user_id
    and public.is_organization_member(ou.organization_id)
);
$$;

create policy "Users can view agentsmith_users records if they are in the same organization"
    on agentsmith_users for select
    to authenticated
    using (is_member_of_same_org(id));