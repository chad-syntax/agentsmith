-- Organization Keys Table
create table organization_keys (
    id bigint generated by default as identity not null primary key,
    organization_id bigint references organizations(id) not null,
    key text not null,
    key_hash text not null,
    vault_secret_id uuid references vault.secrets(id) not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

-- Indexes
create index on organization_keys(organization_id);
create index on organization_keys(vault_secret_id);
create index on organization_keys(created_at);
create index on organization_keys(updated_at);
create index on organization_keys(key);
create index on organization_keys(key_hash);
create unique index on organization_keys(organization_id, key);

-- RLS
alter table organization_keys enable row level security;

-- RLS policies for organization_keys
create policy "Organization members can view organization keys"
    on organization_keys for select
    to authenticated
    using (is_organization_member(organization_id));

create policy "Organization admins can create organization keys"
    on organization_keys for insert
    to authenticated
    with check (is_organization_admin(organization_id));

create policy "Organization admins can delete organization keys"
    on organization_keys for delete
    to authenticated
    using (is_organization_admin(organization_id));

-- Triggers
create trigger trigger_updated_at_organization_keys
    before update on organization_keys
    for each row
    execute function set_updated_at();

-- Organization Key RPC Functions
create or replace function get_organization_vault_secret(arg_vault_secret_id uuid)
returns jsonb
language plpgsql
security definer
set search_path = ''
as $$
declare
  var_result jsonb;
  var_secret_text text;
  var_auth_uid uuid;
begin
  -- get the current authenticated user
  var_auth_uid := (select auth.uid());
  
  -- only return the secret if the user is a member of the organization that owns it
  select s.decrypted_secret into var_secret_text
  from vault.decrypted_secrets s
  join public.organization_keys ok on ok.vault_secret_id = s.id
  join public.organization_users ou on ou.organization_id = ok.organization_id
  join public.agentsmith_users au on ou.user_id = au.id
  where s.id = arg_vault_secret_id
    and au.auth_user_id = var_auth_uid;
    
  -- convert the text to jsonb - handle null case
  if var_secret_text is not null then
    var_result := jsonb_build_object('value', var_secret_text);
  end if;
  
  return var_result;
end;
$$;

-- create rpc function to create an organization key and vault entry
create or replace function create_organization_key(
  arg_organization_uuid uuid,
  arg_key text,
  arg_value text,
  arg_description text default null
)
returns jsonb
language plpgsql
security definer
set search_path = ''
as $$
declare
  var_new_vault_secret_id uuid;
  var_auth_uid uuid;
  var_organization_id bigint;
  var_key_hash text;
begin
  -- get the current authenticated user
  var_auth_uid := (select auth.uid());

  -- get the organization id from the uuid
  select o.id into var_organization_id
  from public.organizations o
  where o.uuid = arg_organization_uuid;
  
  -- verify user is an admin of the organization
  if not public.is_organization_admin(var_organization_id) then
    return jsonb_build_object('success', false, 'error', 'user is not an organization admin');
  end if;
  
  -- first create the vault entry
  insert into vault.secrets (secret, name, description)
  values (arg_value, concat(arg_key, '__org__', arg_organization_uuid), arg_description)
  returning id into var_new_vault_secret_id;

  -- hash the key
  var_key_hash := encode(extensions.digest(arg_key, 'sha256'), 'hex');
  
  -- now create the organization_key entry
  insert into public.organization_keys (organization_id, key, vault_secret_id, key_hash)
  values (var_organization_id, arg_key, var_new_vault_secret_id, var_key_hash);
  
  return jsonb_build_object('success', true, 'vault_secret_id', var_new_vault_secret_id);
end;
$$;

-- create rpc function to delete an organization key
create or replace function delete_organization_key(
  arg_organization_uuid uuid,
  arg_key_name text
)
returns jsonb
language plpgsql
security definer
set search_path = ''
as $$
declare
  var_vault_secret_id uuid;
  var_auth_uid uuid;
  var_organization_id bigint;
begin
  -- get the current authenticated user
  var_auth_uid := (select auth.uid());

  -- get the organization id from the uuid
  select o.id into var_organization_id
  from public.organizations o
  where o.uuid = arg_organization_uuid;
  
  -- verify user is an admin of the organization
  if not public.is_organization_admin(var_organization_id) then
    return jsonb_build_object('success', false, 'error', 'user is not an organization admin');
  end if;
  
  -- get the vault id for this key
  select ok.vault_secret_id into var_vault_secret_id
  from public.organization_keys ok
  where ok.organization_id = var_organization_id and ok.key = arg_key_name;
  
  if var_vault_secret_id is null then
    -- key doesn't exist, nothing to delete
    return jsonb_build_object('success', true, 'message', 'key not found, nothing to delete');
  end if;
  
  -- delete the organization key
  delete from public.organization_keys
  where organization_id = var_organization_id and key = arg_key_name;
  
  -- delete the vault entry
  delete from vault.secrets
  where id = var_vault_secret_id;
  
  return jsonb_build_object('success', true);
end;
$$; 