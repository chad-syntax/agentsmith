-- Organizations
create table organizations (
    id bigint generated by default as identity not null primary key,
    uuid uuid not null unique default uuid_generate_v4(),
    name text not null,
    invite_code text not null unique,
    tier organization_tier not null default 'FREE',
    created_by bigint references agentsmith_users(id) not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create index on organizations(tier);
create index on organizations(created_at);
create index on organizations(updated_at);

alter table organizations enable row level security;
alter table organizations alter column invite_code set default gen_invite_code();

create trigger trigger_updated_at_organizations
    before update on organizations
    for each row
    execute function set_updated_at();

create or replace function join_organization(arg_invite_code text)
returns uuid
language plpgsql
security definer
set search_path = ''
as $$
declare
  var_organization_uuid uuid;
  var_organization_id bigint;
begin
    -- get the organization id, and the uuid from the invite code
    select id, uuid into var_organization_id, var_organization_uuid
    from public.organizations
    where invite_code = arg_invite_code;

    -- verify the organization exists
    if var_organization_id is null then
        raise exception 'Organization not found';
    end if;

    -- verify the user is not already a member of the organization
    if exists (select 1 from public.organization_users ou
        where ou.organization_id = var_organization_id
        and ou.user_id = public.agentsmith_user_id())
    then
        raise exception 'User is already a member of this organization';
    end if;

    -- add the user to the organization
    insert into public.organization_users (organization_id, user_id, role)
    values (var_organization_id, public.agentsmith_user_id(), 'MEMBER');

    return var_organization_uuid;
end;
$$;

create or replace function create_organization(arg_name text)
returns uuid
language plpgsql
security definer
set search_path = ''
as $$
declare
  var_organization_uuid uuid;
  var_organization_id bigint;
begin
    -- create the organization
    insert into public.organizations (name, created_by)
    values (arg_name, public.agentsmith_user_id())
    returning id, uuid into var_organization_id, var_organization_uuid;

    -- create an admin user for the organization
    insert into public.organization_users (organization_id, user_id, role)
    values (var_organization_id, public.agentsmith_user_id(), 'ADMIN');

    -- create a default project for the organization
    insert into public.projects (organization_id, name, created_by)
    values (var_organization_id, 'Default Project', public.agentsmith_user_id());

    return var_organization_uuid;
end;
$$;

create or replace function rename_organization(arg_organization_uuid uuid, arg_name text)
returns void
language plpgsql
security definer
set search_path = ''
as $$
declare
  var_organization_id bigint;
begin
    -- get the organization id from the uuid
    select id into var_organization_id
    from public.organizations
    where uuid = arg_organization_uuid;

    -- verify user is an admin of the organization
    if not public.is_organization_admin(var_organization_id) then
        raise exception 'User is not an organization admin';
    end if;

    update public.organizations
    set name = arg_name
    where id = var_organization_id;
end;
$$;

-- create function to generate api key for new organizations
create or replace function generate_organization_api_key()
returns trigger
language plpgsql
security definer
set search_path = ''
as $$
declare
  var_new_vault_secret_id uuid;
  var_api_key text;
  var_api_key_hash text;
begin
  -- generate a random api key with prefix
  var_api_key := 'sdk_' || public.gen_random_alphanumeric(32);

  -- hash the api key
  var_api_key_hash := encode(extensions.digest(var_api_key, 'sha256'), 'hex');

  -- validate the key hash isnt already in the database, keep generating until we find one that isnt
  while exists (select 1 from public.organization_keys ok where ok.key_hash = var_api_key_hash) loop
    var_api_key := 'sdk_' || public.gen_random_alphanumeric(32);
    var_api_key_hash := encode(extensions.digest(var_api_key, 'sha256'), 'hex');
  end loop;
  
  -- create the vault entry
  insert into vault.secrets (secret, name, description)
  values (
    var_api_key, 
    'SDK_API_KEY__org__' || new.uuid, 
    'SDK API Key for organization ' || new.uuid
  )
  returning id into var_new_vault_secret_id;
  
  -- create the organization_key entry
  insert into public.organization_keys (organization_id, key, vault_secret_id, key_hash)
  values (new.id, 'SDK_API_KEY', var_new_vault_secret_id, var_api_key_hash);
  
  return new;
end;
$$;

create trigger trigger_generate_api_key
after insert on organizations
for each row
execute function generate_organization_api_key();

create or replace function get_organization_by_api_key_hash(arg_api_key_hash text)
returns jsonb
language plpgsql
security definer
set search_path = ''
as $$
declare
  var_result jsonb;
begin
  -- look up organization by api key hash
  select 
    jsonb_build_object(
      'organization_id', o.id,
      'organization_uuid', o.uuid,
      'user_id', au.id,
      'auth_user_id', au.auth_user_id,
      'email', au.email
    ) into var_result
  from public.organization_keys ok
  join public.organizations o on ok.organization_id = o.id
  join public.agentsmith_users au on o.created_by = au.id
  where ok.key_hash = arg_api_key_hash
    and ok.key = 'SDK_API_KEY';
    
  -- check if we found a result and raise exception if not
  if var_result is null then
    raise exception 'invalid api key';
  end if;
  
  return var_result;
end;
$$; 