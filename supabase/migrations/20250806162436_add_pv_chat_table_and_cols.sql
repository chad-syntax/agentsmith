create type prompt_type as enum ('CHAT', 'NON_CHAT');


alter table prompt_versions add column type prompt_type not null default 'NON_CHAT';
alter table prompt_versions alter column type drop default;

create table pv_chat_prompts (
  id bigint generated by default as identity not null primary key,
  uuid uuid not null default gen_random_uuid(),
  prompt_version_id bigint references prompt_versions(id) not null,
  index integer not null,
  role text not null,
  content text,
  last_sync_git_sha text,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now()
);

alter table prompt_versions alter column content drop not null;

create index on pv_chat_prompts(prompt_version_id);
create index on pv_chat_prompts(uuid);
create index on pv_chat_prompts(role);
create index on pv_chat_prompts(index);
create index on pv_chat_prompts(created_at);
create index on pv_chat_prompts(updated_at);

alter table pv_chat_prompts enable row level security;

create policy "Users can view pv chat prompts they have access to"
    on pv_chat_prompts for select
    to authenticated
    using (exists (
        select 1 from prompt_versions pv
        where pv.id = prompt_version_id
        and has_prompt_access(pv.prompt_id)
    ));

create policy "Users can create pv chat prompts they have access to"
    on pv_chat_prompts for insert
    to authenticated
    with check (exists (
        select 1 from prompt_versions pv
        where pv.id = prompt_version_id
        and has_prompt_access(pv.prompt_id)
    ));

create policy "Users can update pv chat prompts they have access to"
    on pv_chat_prompts for update
    to authenticated
    using (exists (
        select 1 from prompt_versions pv
        where pv.id = prompt_version_id
        and has_prompt_access(pv.prompt_id)
    ));

create policy "Users can delete pv chat prompts they have access to"
    on pv_chat_prompts for delete
    to authenticated
    using (exists (
        select 1 from prompt_versions pv
        where pv.id = prompt_version_id
        and has_prompt_access(pv.prompt_id)
    ));

grant select on pv_chat_prompts to github_webhook;
grant insert on pv_chat_prompts to github_webhook;
grant update on pv_chat_prompts to github_webhook;
grant delete on pv_chat_prompts to github_webhook;

create policy "Allow github_webhook select access on pv_chat_prompts"
    on public.pv_chat_prompts
    as permissive
    for select
    to github_webhook
    using (true);

create policy "Allow github_webhook insert access on pv_chat_prompts"
    on public.pv_chat_prompts
    as permissive
    for insert
    to github_webhook
    with check (true);

create policy "Allow github_webhook update access on pv_chat_prompts"
    on public.pv_chat_prompts
    as permissive
    for update
    to github_webhook
    using (true) with check (true);

create policy "Allow github_webhook delete access on pv_chat_prompts"
    on public.pv_chat_prompts
    as permissive
    for delete
    to github_webhook
    using (true);