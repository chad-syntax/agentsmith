-- Enable the "pgtap" extension
create extension pgtap with schema extensions;

-- Enums
create type organization_tier as enum ('FREE', 'PRO', 'ENTERPRISE');
create type prompt_status as enum ('DRAFT', 'PUBLISHED', 'ARCHIVED');
create type variable_type as enum ('STRING', 'NUMBER', 'BOOLEAN');
create type organization_user_role as enum ('ADMIN', 'MEMBER');

-- Functions
create or replace function set_updated_at()
returns trigger
language plpgsql
security definer
set search_path = ''
as $$
begin
    new.updated_at = now();
    return new;
end;
$$;

-- Agentsmith Users
create table agentsmith_users (
    id bigint generated by default as identity not null primary key,
    auth_user_id uuid references auth.users(id) not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create index on agentsmith_users(auth_user_id);
create index on agentsmith_users(created_at);
create index on agentsmith_users(updated_at);

alter table agentsmith_users enable row level security;

create or replace function agentsmith_user_id()
returns bigint
language sql
security definer
set search_path = ''
as $$
  select id from public.agentsmith_users
  where auth_user_id = (select auth.uid());
$$;

create policy "Users can view their own record"
    on agentsmith_users for select
    using (auth_user_id = (SELECT auth.uid()));

create trigger trigger_updated_at_agentsmith_users
    before update on agentsmith_users
    for each row
    execute function set_updated_at();

-- Organizations
create table organizations (
    id bigint generated by default as identity not null primary key,
    uuid uuid not null unique default uuid_generate_v4(),
    name text not null,
    tier organization_tier not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create index on organizations(tier);
create index on organizations(created_at);
create index on organizations(updated_at);

alter table organizations enable row level security;

create trigger trigger_updated_at_organizations
    before update on organizations
    for each row
    execute function set_updated_at();

create table organization_users (
    id bigint generated by default as identity not null primary key,
    organization_id bigint references organizations(id) not null,
    user_id bigint references agentsmith_users(id) not null,
    role organization_user_role not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now(),
    unique (organization_id, user_id)
);

create index on organization_users(organization_id);
create index on organization_users(user_id);
create index on organization_users(role);
create index on organization_users(created_at);

alter table organization_users enable row level security;

create or replace function is_organization_member(org_id bigint)
returns boolean
language sql
security definer
set search_path = ''
as $$
  select exists (
    select 1 from public.organization_users ou
    where ou.organization_id = org_id
    and ou.user_id = public.agentsmith_user_id()
  );
$$;

create or replace function is_organization_admin(org_id bigint)
returns boolean
language sql
security definer
set search_path = ''
as $$
  select exists (
    select 1 from public.organization_users
    where organization_id = org_id
    and user_id = public.agentsmith_user_id()
    and role = 'ADMIN'
  );
$$;

create policy "organization users select"
    on organization_users for select
    using (is_organization_member(organization_id));

create policy "organization users insert"
    on organization_users for insert
    with check (is_organization_admin(organization_id));

create policy "organization users update"
    on organization_users for update
    using (is_organization_admin(organization_id));

create policy "organization users delete"
    on organization_users for delete
    using (is_organization_admin(organization_id));

create policy "Users can view organizations they are members of"
    on organizations for select
    using (is_organization_member(id));

create policy "Users can view organization members if they are a member"
    on organization_users for select
    using (is_organization_member(organization_id));

create trigger trigger_updated_at_organization_users
    before update on organization_users
    for each row
    execute function set_updated_at();

-- Auto-create agentsmith_users record when auth.users record is created
create or replace function create_agentsmith_user()
returns trigger
language plpgsql
security definer
set search_path = ''
as $$
begin
    insert into public.agentsmith_users (auth_user_id)
    values (new.id);
    return new;
end;
$$;

create trigger trigger_create_agentsmith_user
    after insert on auth.users
    for each row
    execute function create_agentsmith_user();

-- Projects
create table projects (
    id bigint generated by default as identity not null primary key,
    uuid uuid not null unique default uuid_generate_v4(),
    name text not null,
    organization_id bigint references organizations(id) not null,
    created_by bigint references agentsmith_users(id) not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create index on projects(organization_id);
create index on projects(created_by);
create index on projects(created_at);

alter table projects enable row level security;

create or replace function has_project_access(proj_id bigint)
returns boolean
language sql
security definer
set search_path = ''
as $$
  select exists (
    select 1 from public.projects p
    join public.organization_users ou on ou.organization_id = p.organization_id
    where p.id = proj_id
    and ou.user_id = public.agentsmith_user_id()
  );
$$;

create policy "Users can view projects they have access to"
    on projects for select
    using (has_project_access(id));

create policy "Organization admins can create projects"
    on projects for insert
    with check (is_organization_admin(organization_id));

create policy "Organization admins can update projects"
    on projects for update
    using (is_organization_admin(organization_id));

create policy "Organization admins can delete projects"
    on projects for delete
    using (is_organization_admin(organization_id));

create trigger trigger_updated_at_projects
    before update on projects
    for each row
    execute function set_updated_at();

-- User Keys
create table user_keys (
    id bigint generated by default as identity not null primary key,
    user_id bigint references agentsmith_users(id),
    key text not null,
    vault_secret_id uuid references vault.secrets(id) not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create index on user_keys(user_id);
create index on user_keys(vault_secret_id);
create index on user_keys(created_at);
create index on user_keys(updated_at);
create index on user_keys(key);
create unique index on user_keys(user_id, key);

alter table user_keys enable row level security;

create or replace function is_key_owner(key_id bigint)
returns boolean
language sql
security definer
set search_path = ''
as $$
  select exists (
    select 1 from public.user_keys
    where id = key_id
    and user_id = public.agentsmith_user_id()
  );
$$;

create policy "Users can view their own keys"
    on user_keys for select
    using (is_key_owner(id));

create policy "users can insert their own keys"
    on user_keys for insert
    with check (user_id = agentsmith_user_id());

create policy "users can delete their own keys"
    on user_keys for delete
    using (user_id = agentsmith_user_id());

create trigger trigger_updated_at_user_keys
    before update on user_keys
    for each row
    execute function set_updated_at();

-- Global Contexts
create table global_contexts (
    id bigint generated by default as identity not null primary key,
    project_id bigint references projects(id),
    content jsonb not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create index on global_contexts(project_id);
create index on global_contexts(created_at);
create index on global_contexts(updated_at);

alter table global_contexts enable row level security;

create policy "Users can view global contexts they have access to"
    on global_contexts for select
    using (has_project_access(project_id));

create policy "Users can update global contexts they have access to"
    on global_contexts for update
    using (has_project_access(project_id));

create policy "Admins can delete global contexts they have access to"
    on global_contexts for delete
    using (
        has_project_access(project_id) and 
        is_organization_admin((select organization_id from projects where id = project_id))
    );


create trigger trigger_updated_at_global_contexts
    before update on global_contexts
    for each row
    execute function set_updated_at();

-- Prompts
create table prompts (
    id bigint generated by default as identity not null primary key,
    uuid uuid not null unique default uuid_generate_v4(),
    project_id bigint references projects(id),
    name text not null,
    slug text not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create index on prompts(project_id);
create index on prompts(created_at);
create index on prompts(updated_at);

alter table prompts enable row level security;

create or replace function has_prompt_access(prompt_id bigint)
returns boolean
language sql
security definer
set search_path = ''
as $$
  select exists (
    select 1 from public.prompts pr
    join public.projects p on p.id = pr.project_id
    join public.organization_users ou on ou.organization_id = p.organization_id
    where pr.id = prompt_id
    and ou.user_id = public.agentsmith_user_id()
  );
$$;

create policy "Users can view prompts they have access to"
    on prompts for select
    using (has_project_access(project_id));

create policy "Users can create prompts in projects they have access to"
    on prompts for insert
    with check (has_project_access(project_id));

create policy "Users can update prompts they have access to"
    on prompts for update
    using (has_project_access(project_id));

create policy "Users can delete prompts they have access to"
    on prompts for delete
    using (has_project_access(project_id));

create trigger trigger_updated_at_prompts
    before update on prompts
    for each row
    execute function set_updated_at();

-- Prompt Versions
create table prompt_versions (
    id bigint generated by default as identity not null primary key,
    uuid uuid not null unique default uuid_generate_v4(),
    prompt_id bigint references prompts(id),
    model text not null,
    content text not null,
    version text not null,
    status prompt_status not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create index on prompt_versions(version);
create index on prompt_versions(model);
create index on prompt_versions(prompt_id);
create index on prompt_versions(created_at);
create index on prompt_versions(updated_at);

alter table prompt_versions enable row level security;

create policy "Users can view prompt versions they have access to"
    on prompt_versions for select
    using (has_prompt_access(prompt_id));

create policy "Users can create prompt versions they have access to"
    on prompt_versions for insert
    with check (has_prompt_access(prompt_id));

create policy "Users can update prompt versions they have access to"
    on prompt_versions for update
    using (has_prompt_access(prompt_id));

create policy "Users can delete prompt versions they have access to"
    on prompt_versions for delete
    using (has_prompt_access(prompt_id));

create trigger trigger_updated_at_prompt_versions
    before update on prompt_versions
    for each row
    execute function set_updated_at();

-- Prompt Variables
create table prompt_variables (
    id bigint generated by default as identity not null primary key,
    prompt_version_id bigint references prompt_versions(id),
    name text not null,
    type variable_type not null,
    required boolean not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create index on prompt_variables(prompt_version_id);

alter table prompt_variables enable row level security;

create policy "Users can view prompt variables they have access to"
    on prompt_variables for select
    using (exists (
        select 1 from prompt_versions pv
        where pv.id = prompt_version_id
        and has_prompt_access(pv.prompt_id)
    ));

create policy "Users can create prompt variables they have access to"
    on prompt_variables for insert
    with check (exists (
        select 1 from prompt_versions pv
        where pv.id = prompt_version_id
        and has_prompt_access(pv.prompt_id)
    ));

create policy "Users can update prompt variables they have access to"
    on prompt_variables for update
    using (exists (
        select 1 from prompt_versions pv
        where pv.id = prompt_version_id
        and has_prompt_access(pv.prompt_id)
    ));

create policy "Users can delete prompt variables they have access to"
    on prompt_variables for delete
    using (exists (
        select 1 from prompt_versions pv
        where pv.id = prompt_version_id
        and has_prompt_access(pv.prompt_id)
    ));

create trigger trigger_updated_at_prompt_variables
    before update on prompt_variables
    for each row
    execute function set_updated_at();