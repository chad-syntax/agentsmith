create extension if not exists "pgtap" with schema "extensions";

create extension if not exists "timescaledb" with schema "extensions";

CREATE OR REPLACE FUNCTION public.gen_invite_code()
 RETURNS text
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
  var_invite_code text;
begin
    -- generate string of 6 random uppercase alphanumeric characters
    select upper(substr(md5(random()::text), 1, 6)) into var_invite_code;

    -- we continuously check if the invite code already exists until we find one that doesn't
    while exists (select 1 from public.organizations where invite_code = var_invite_code) loop
        select upper(substr(md5(random()::text), 1, 6)) into var_invite_code;
    end loop;

    -- once we find an invite code that doesn't exist, we return it
    return var_invite_code;
end;
$function$
;


create type "public"."organization_tier" as enum ('FREE', 'PRO', 'ENTERPRISE');

create type "public"."organization_user_role" as enum ('ADMIN', 'MEMBER');

create type "public"."prompt_status" as enum ('DRAFT', 'PUBLISHED', 'ARCHIVED');

create type "public"."variable_type" as enum ('STRING', 'NUMBER', 'BOOLEAN', 'JSON');

create type GITHUB_APP_INSTALLATION_STATUS as enum (
    'PENDING',
    'ACTIVE',
    'SUSPENDED',
    'DELETED'
);

create table "public"."agentsmith_users" (
    "id" bigint generated by default as identity not null,
    "auth_user_id" uuid not null,
    "email" text,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."agentsmith_users" enable row level security;

create table "public"."github_app_installations" (
    "id" bigint generated by default as identity not null,
    "uuid" uuid default uuid_generate_v4() not null,
    "organization_id" bigint not null,
    "github_account_id" bigint,
    "installation_id" bigint,
    "status" GITHUB_APP_INSTALLATION_STATUS not null default 'PENDING',
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."github_app_installations" enable row level security;

create table "public"."global_contexts" (
    "id" bigint generated by default as identity not null,
    "project_id" bigint,
    "content" jsonb not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."global_contexts" enable row level security;

create table "public"."llm_logs" (
    "id" bigint generated by default as identity not null,
    "uuid" uuid not null default uuid_generate_v4(),
    "project_id" bigint not null,
    "prompt_version_id" bigint not null,
    "prompt_variables" jsonb not null,
    "raw_input" jsonb not null,
    "raw_output" jsonb,
    "start_time" timestamp with time zone not null,
    "end_time" timestamp with time zone,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);

select create_hypertable('llm_logs', 'created_at');

alter table "public"."llm_logs" enable row level security;

create table "public"."organization_keys" (
    "id" bigint generated by default as identity not null,
    "organization_id" bigint not null,
    "key" text not null,
    "key_hash" text not null,
    "vault_secret_id" uuid not null references vault.secrets(id),
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."organization_keys" enable row level security;

create table "public"."organization_users" (
    "id" bigint generated by default as identity not null,
    "organization_id" bigint not null,
    "user_id" bigint not null,
    "role" organization_user_role not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."organization_users" enable row level security;

create table "public"."organizations" (
    "id" bigint generated by default as identity not null,
    "uuid" uuid not null default uuid_generate_v4(),
    "name" text not null,
    "invite_code" text not null default gen_invite_code(),
    "tier" organization_tier not null default 'FREE'::organization_tier,
    "created_by" bigint not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."organizations" enable row level security;

create table "public"."project_repositories" (
    "id" bigint generated by default as identity not null,
    "project_id" bigint,
    "organization_id" bigint not null,
    "github_app_installation_id" bigint not null,
    "agentsmith_folder" text not null default 'agentsmith',
    "repository_id" bigint not null,
    "repository_name" text not null,
    "repository_full_name" text not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."project_repositories" enable row level security;

create table "public"."projects" (
    "id" bigint generated by default as identity not null,
    "uuid" uuid not null default uuid_generate_v4(),
    "name" text not null,
    "organization_id" bigint not null,
    "created_by" bigint not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."projects" enable row level security;

create table "public"."prompt_variables" (
    "id" bigint generated by default as identity not null,
    "prompt_version_id" bigint,
    "name" text not null,
    "type" variable_type not null,
    "required" boolean not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."prompt_variables" enable row level security;

create table "public"."prompt_versions" (
    "id" bigint generated by default as identity not null,
    "uuid" uuid not null default uuid_generate_v4(),
    "prompt_id" bigint not null,
    "config" jsonb not null,
    "content" text not null,
    "version" text not null,
    "status" prompt_status not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."prompt_versions" enable row level security;

create table "public"."prompts" (
    "id" bigint generated by default as identity not null,
    "uuid" uuid not null default uuid_generate_v4(),
    "project_id" bigint not null,
    "name" text not null,
    "slug" text not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."prompts" enable row level security;

CREATE INDEX agentsmith_users_auth_user_id_idx ON public.agentsmith_users USING btree (auth_user_id);

CREATE INDEX agentsmith_users_created_at_idx ON public.agentsmith_users USING btree (created_at);

CREATE UNIQUE INDEX agentsmith_users_pkey ON public.agentsmith_users USING btree (id);

CREATE INDEX agentsmith_users_updated_at_idx ON public.agentsmith_users USING btree (updated_at);

CREATE INDEX github_app_installations_created_at_idx ON public.github_app_installations USING btree (created_at);

CREATE INDEX github_app_installations_github_account_id_idx ON public.github_app_installations USING btree (github_account_id);

CREATE INDEX github_app_installations_installation_id_idx ON public.github_app_installations USING btree (installation_id);

CREATE INDEX github_app_installations_organization_id_idx ON public.github_app_installations USING btree (organization_id);

CREATE UNIQUE INDEX github_app_installations_organization_id_installation_id_key ON public.github_app_installations USING btree (organization_id, installation_id);

CREATE UNIQUE INDEX github_app_installations_pkey ON public.github_app_installations USING btree (id);

CREATE UNIQUE INDEX ON github_app_installations(organization_id) WHERE status = 'ACTIVE';

CREATE INDEX global_contexts_created_at_idx ON public.global_contexts USING btree (created_at);

CREATE UNIQUE INDEX global_contexts_pkey ON public.global_contexts USING btree (id);

CREATE INDEX global_contexts_project_id_idx ON public.global_contexts USING btree (project_id);

CREATE INDEX global_contexts_updated_at_idx ON public.global_contexts USING btree (updated_at);

CREATE INDEX llm_logs_end_time_created_at_idx ON public.llm_logs USING btree (end_time, created_at);

CREATE INDEX llm_logs_project_id_created_at_idx ON public.llm_logs USING btree (project_id, created_at);

CREATE INDEX llm_logs_prompt_version_id_created_at_idx ON public.llm_logs USING btree (prompt_version_id, created_at);

CREATE INDEX llm_logs_start_time_created_at_idx ON public.llm_logs USING btree (start_time, created_at);

CREATE UNIQUE INDEX llm_logs_uuid_created_at_key ON public.llm_logs USING btree (uuid, created_at);

CREATE INDEX organization_keys_created_at_idx ON public.organization_keys USING btree (created_at);

CREATE INDEX organization_keys_key_hash_idx ON public.organization_keys USING btree (key_hash);

CREATE INDEX organization_keys_key_idx ON public.organization_keys USING btree (key);

CREATE INDEX organization_keys_organization_id_idx ON public.organization_keys USING btree (organization_id);

CREATE UNIQUE INDEX organization_keys_organization_id_key_idx ON public.organization_keys USING btree (organization_id, key);

CREATE UNIQUE INDEX organization_keys_pkey ON public.organization_keys USING btree (id);

CREATE INDEX organization_keys_updated_at_idx ON public.organization_keys USING btree (updated_at);

CREATE INDEX organization_keys_vault_secret_id_idx ON public.organization_keys USING btree (vault_secret_id);

CREATE INDEX organization_users_created_at_idx ON public.organization_users USING btree (created_at);

CREATE INDEX organization_users_organization_id_idx ON public.organization_users USING btree (organization_id);

CREATE UNIQUE INDEX organization_users_organization_id_user_id_key ON public.organization_users USING btree (organization_id, user_id);

CREATE UNIQUE INDEX organization_users_pkey ON public.organization_users USING btree (id);

CREATE INDEX organization_users_role_idx ON public.organization_users USING btree (role);

CREATE INDEX organization_users_user_id_idx ON public.organization_users USING btree (user_id);

CREATE INDEX organizations_created_at_idx ON public.organizations USING btree (created_at);

CREATE UNIQUE INDEX organizations_invite_code_key ON public.organizations USING btree (invite_code);

CREATE UNIQUE INDEX organizations_pkey ON public.organizations USING btree (id);

CREATE INDEX organizations_tier_idx ON public.organizations USING btree (tier);

CREATE INDEX organizations_updated_at_idx ON public.organizations USING btree (updated_at);

CREATE UNIQUE INDEX organizations_uuid_key ON public.organizations USING btree (uuid);

CREATE INDEX project_repositories_created_at_idx ON public.project_repositories USING btree (created_at);

CREATE INDEX project_repositories_github_app_installation_id_idx ON public.project_repositories USING btree (github_app_installation_id);

CREATE INDEX project_repositories_organization_id_idx ON public.project_repositories USING btree (organization_id);

CREATE UNIQUE INDEX project_repositories_pkey ON public.project_repositories USING btree (id);

CREATE INDEX project_repositories_project_id_idx ON public.project_repositories USING btree (project_id);

CREATE UNIQUE INDEX project_repositories_project_id_repository_id_key ON public.project_repositories USING btree (project_id, repository_id);

CREATE INDEX project_repositories_repository_id_idx ON public.project_repositories USING btree (repository_id);

CREATE INDEX projects_created_at_idx ON public.projects USING btree (created_at);

CREATE INDEX projects_created_by_idx ON public.projects USING btree (created_by);

CREATE INDEX projects_organization_id_idx ON public.projects USING btree (organization_id);

CREATE UNIQUE INDEX projects_pkey ON public.projects USING btree (id);

CREATE UNIQUE INDEX projects_uuid_key ON public.projects USING btree (uuid);

CREATE UNIQUE INDEX prompt_variables_pkey ON public.prompt_variables USING btree (id);

CREATE INDEX prompt_variables_prompt_version_id_idx ON public.prompt_variables USING btree (prompt_version_id);

CREATE INDEX prompt_versions_created_at_idx ON public.prompt_versions USING btree (created_at);

CREATE UNIQUE INDEX prompt_versions_pkey ON public.prompt_versions USING btree (id);

CREATE INDEX prompt_versions_prompt_id_idx ON public.prompt_versions USING btree (prompt_id);

CREATE INDEX prompt_versions_updated_at_idx ON public.prompt_versions USING btree (updated_at);

CREATE UNIQUE INDEX prompt_versions_uuid_key ON public.prompt_versions USING btree (uuid);

CREATE INDEX prompt_versions_version_idx ON public.prompt_versions USING btree (version);

CREATE INDEX prompts_created_at_idx ON public.prompts USING btree (created_at);

CREATE UNIQUE INDEX prompts_pkey ON public.prompts USING btree (id);

CREATE INDEX prompts_project_id_idx ON public.prompts USING btree (project_id);

CREATE UNIQUE INDEX prompts_project_id_slug_key ON public.prompts USING btree (project_id, slug);

CREATE INDEX prompts_updated_at_idx ON public.prompts USING btree (updated_at);

CREATE UNIQUE INDEX prompts_uuid_key ON public.prompts USING btree (uuid);

alter table "public"."agentsmith_users" add constraint "agentsmith_users_pkey" PRIMARY KEY using index "agentsmith_users_pkey";

alter table "public"."github_app_installations" add constraint "github_app_installations_pkey" PRIMARY KEY using index "github_app_installations_pkey";

alter table "public"."global_contexts" add constraint "global_contexts_pkey" PRIMARY KEY using index "global_contexts_pkey";

alter table "public"."organization_keys" add constraint "organization_keys_pkey" PRIMARY KEY using index "organization_keys_pkey";

alter table "public"."organization_users" add constraint "organization_users_pkey" PRIMARY KEY using index "organization_users_pkey";

alter table "public"."organizations" add constraint "organizations_pkey" PRIMARY KEY using index "organizations_pkey";

alter table "public"."project_repositories" add constraint "project_repositories_pkey" PRIMARY KEY using index "project_repositories_pkey";

alter table "public"."projects" add constraint "projects_pkey" PRIMARY KEY using index "projects_pkey";

alter table "public"."prompt_variables" add constraint "prompt_variables_pkey" PRIMARY KEY using index "prompt_variables_pkey";

alter table "public"."prompt_versions" add constraint "prompt_versions_pkey" PRIMARY KEY using index "prompt_versions_pkey";

alter table "public"."prompts" add constraint "prompts_pkey" PRIMARY KEY using index "prompts_pkey";

alter table "public"."agentsmith_users" add constraint "agentsmith_users_auth_user_id_fkey" FOREIGN KEY (auth_user_id) REFERENCES auth.users(id) not valid;

alter table "public"."agentsmith_users" validate constraint "agentsmith_users_auth_user_id_fkey";

alter table "public"."github_app_installations" add constraint "github_app_installations_organization_id_fkey" FOREIGN KEY (organization_id) REFERENCES organizations(id) not valid;

alter table "public"."github_app_installations" validate constraint "github_app_installations_organization_id_fkey";

alter table "public"."github_app_installations" add constraint "github_app_installations_organization_id_installation_id_key" UNIQUE using index "github_app_installations_organization_id_installation_id_key";

alter table "public"."global_contexts" add constraint "global_contexts_project_id_fkey" FOREIGN KEY (project_id) REFERENCES projects(id) not valid;

alter table "public"."global_contexts" validate constraint "global_contexts_project_id_fkey";

alter table "public"."llm_logs" add constraint "llm_logs_project_id_fkey" FOREIGN KEY (project_id) REFERENCES projects(id) not valid;

alter table "public"."llm_logs" validate constraint "llm_logs_project_id_fkey";

alter table "public"."llm_logs" add constraint "llm_logs_prompt_version_id_fkey" FOREIGN KEY (prompt_version_id) REFERENCES prompt_versions(id) not valid;

alter table "public"."llm_logs" validate constraint "llm_logs_prompt_version_id_fkey";

alter table "public"."organization_keys" add constraint "organization_keys_organization_id_fkey" FOREIGN KEY (organization_id) REFERENCES organizations(id) not valid;

alter table "public"."organization_keys" validate constraint "organization_keys_organization_id_fkey";

alter table "public"."organization_users" add constraint "organization_users_organization_id_fkey" FOREIGN KEY (organization_id) REFERENCES organizations(id) not valid;

alter table "public"."organization_users" validate constraint "organization_users_organization_id_fkey";

alter table "public"."organization_users" add constraint "organization_users_organization_id_user_id_key" UNIQUE using index "organization_users_organization_id_user_id_key";

alter table "public"."organization_users" add constraint "organization_users_user_id_fkey" FOREIGN KEY (user_id) REFERENCES agentsmith_users(id) not valid;

alter table "public"."organization_users" validate constraint "organization_users_user_id_fkey";

alter table "public"."organizations" add constraint "organizations_created_by_fkey" FOREIGN KEY (created_by) REFERENCES agentsmith_users(id) not valid;

alter table "public"."organizations" validate constraint "organizations_created_by_fkey";

alter table "public"."organizations" add constraint "organizations_invite_code_key" UNIQUE using index "organizations_invite_code_key";

alter table "public"."organizations" add constraint "organizations_uuid_key" UNIQUE using index "organizations_uuid_key";

alter table "public"."project_repositories" add constraint "project_repositories_github_app_installation_id_fkey" FOREIGN KEY (github_app_installation_id) REFERENCES github_app_installations(id) not valid;

alter table "public"."project_repositories" validate constraint "project_repositories_github_app_installation_id_fkey";

alter table "public"."project_repositories" add constraint "project_repositories_organization_id_fkey" FOREIGN KEY (organization_id) REFERENCES organizations(id) not valid;

alter table "public"."project_repositories" validate constraint "project_repositories_organization_id_fkey";

alter table "public"."project_repositories" add constraint "project_repositories_project_id_fkey" FOREIGN KEY (project_id) REFERENCES projects(id) not valid;

alter table "public"."project_repositories" validate constraint "project_repositories_project_id_fkey";

alter table "public"."project_repositories" add constraint "project_repositories_project_id_repository_id_key" UNIQUE using index "project_repositories_project_id_repository_id_key";

alter table "public"."projects" add constraint "projects_created_by_fkey" FOREIGN KEY (created_by) REFERENCES agentsmith_users(id) not valid;

alter table "public"."projects" validate constraint "projects_created_by_fkey";

alter table "public"."projects" add constraint "projects_organization_id_fkey" FOREIGN KEY (organization_id) REFERENCES organizations(id) not valid;

alter table "public"."projects" validate constraint "projects_organization_id_fkey";

alter table "public"."projects" add constraint "projects_uuid_key" UNIQUE using index "projects_uuid_key";

alter table "public"."prompt_variables" add constraint "prompt_variables_prompt_version_id_fkey" FOREIGN KEY (prompt_version_id) REFERENCES prompt_versions(id) not valid;

alter table "public"."prompt_variables" validate constraint "prompt_variables_prompt_version_id_fkey";

alter table "public"."prompt_versions" add constraint "prompt_versions_prompt_id_fkey" FOREIGN KEY (prompt_id) REFERENCES prompts(id) not valid;

alter table "public"."prompt_versions" validate constraint "prompt_versions_prompt_id_fkey";

alter table "public"."prompt_versions" add constraint "prompt_versions_uuid_key" UNIQUE using index "prompt_versions_uuid_key";

alter table "public"."prompt_versions" add constraint "prompt_versions_version_check" CHECK ((version ~ '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'::text)) not valid;

alter table "public"."prompt_versions" validate constraint "prompt_versions_version_check";

alter table "public"."prompts" add constraint "prompts_project_id_fkey" FOREIGN KEY (project_id) REFERENCES projects(id) not valid;

alter table "public"."prompts" validate constraint "prompts_project_id_fkey";

alter table "public"."prompts" add constraint "prompts_project_id_slug_key" UNIQUE using index "prompts_project_id_slug_key";

alter table "public"."prompts" add constraint "prompts_uuid_key" UNIQUE using index "prompts_uuid_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.agentsmith_user_id()
 RETURNS bigint
 LANGUAGE sql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
  select id from public.agentsmith_users
  where auth_user_id = (select auth.uid());
$function$
;

CREATE OR REPLACE FUNCTION public.create_agentsmith_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
  var_agentsmith_user_id bigint;
  var_organization_id bigint;
begin
    -- create the agentsmith_users record
    insert into public.agentsmith_users (auth_user_id, email)
    values (new.id, new.email)
    returning id into var_agentsmith_user_id;

    -- create the default organization
    insert into public.organizations (name, tier, created_by)
    values ('Default Organization', 'FREE', var_agentsmith_user_id)
    returning id into var_organization_id;

    -- create the default organization user
    insert into public.organization_users (organization_id, user_id, role)
    values (var_organization_id, var_agentsmith_user_id, 'ADMIN');

    -- create the default project
    insert into public.projects (organization_id, name, created_by)
    values (var_organization_id, 'Default Project', var_agentsmith_user_id);

    return new;
end;
$function$
;

create trigger trigger_create_agentsmith_user
    after insert on auth.users
    for each row
    execute function create_agentsmith_user();

CREATE OR REPLACE FUNCTION public.create_organization(arg_name text)
 RETURNS uuid
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
  var_organization_uuid uuid;
  var_organization_id bigint;
begin
    -- create the organization
    insert into public.organizations (name, created_by)
    values (arg_name, public.agentsmith_user_id())
    returning id, uuid into var_organization_id, var_organization_uuid;

    -- create an admin user for the organization
    insert into public.organization_users (organization_id, user_id, role)
    values (var_organization_id, public.agentsmith_user_id(), 'ADMIN');

    -- create a default project for the organization
    insert into public.projects (organization_id, name, created_by)
    values (var_organization_id, 'Default Project', public.agentsmith_user_id());

    return var_organization_uuid;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.create_organization_key(arg_organization_uuid uuid, arg_key text, arg_value text, arg_description text DEFAULT NULL::text)
 RETURNS jsonb
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
  var_new_vault_secret_id uuid;
  var_auth_uid uuid;
  var_organization_id bigint;
  var_key_hash text;
begin
  -- get the current authenticated user
  var_auth_uid := (select auth.uid());

  -- get the organization id from the uuid
  select o.id into var_organization_id
  from public.organizations o
  where o.uuid = arg_organization_uuid;

  -- verify user is an admin of the organization
  if not public.is_organization_admin(var_organization_id) then
    return jsonb_build_object('success', false, 'error', 'user is not an organization admin');
  end if;

  -- first create the vault entry
  insert into vault.secrets (secret, name, description)
  values (arg_value, concat(arg_key, '__org__', arg_organization_uuid), arg_description)
  returning id into var_new_vault_secret_id;

  -- hash the key
  var_key_hash := encode(extensions.digest(arg_key, 'sha256'), 'hex');

  -- now create the organization_key entry
  insert into public.organization_keys (organization_id, key, vault_secret_id, key_hash)
  values (var_organization_id, arg_key, var_new_vault_secret_id, var_key_hash);

  return jsonb_build_object('success', true, 'vault_secret_id', var_new_vault_secret_id);
end;
$function$
;

CREATE OR REPLACE FUNCTION public.delete_organization_key(arg_organization_uuid uuid, arg_key_name text)
 RETURNS jsonb
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
  var_vault_secret_id uuid;
  var_auth_uid uuid;
  var_organization_id bigint;
begin
  -- get the current authenticated user
  var_auth_uid := (select auth.uid());

  -- get the organization id from the uuid
  select o.id into var_organization_id
  from public.organizations o
  where o.uuid = arg_organization_uuid;

  -- verify user is an admin of the organization
  if not public.is_organization_admin(var_organization_id) then
    return jsonb_build_object('success', false, 'error', 'user is not an organization admin');
  end if;

  -- get the vault id for this key
  select ok.vault_secret_id into var_vault_secret_id
  from public.organization_keys ok
  where ok.organization_id = var_organization_id and ok.key = arg_key_name;

  if var_vault_secret_id is null then
    -- key doesn't exist, nothing to delete
    return jsonb_build_object('success', true, 'message', 'key not found, nothing to delete');
  end if;

  -- delete the organization key
  delete from public.organization_keys
  where organization_id = var_organization_id and key = arg_key_name;

  -- delete the vault entry
  delete from vault.secrets
  where id = var_vault_secret_id;

  return jsonb_build_object('success', true);
end;
$function$
;


CREATE OR REPLACE FUNCTION public.gen_random_alphanumeric(length integer)
 RETURNS text
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
    chars text := 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    result text := '';
    i integer := 0;
begin
    if length < 0 then
        raise exception 'Negative string length not allowed';
    end if;

    for i in 1..length loop
        result := result || substr(chars, floor(random() * 62)::integer + 1, 1);
    end loop;

    return result;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.generate_organization_api_key()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
  var_new_vault_secret_id uuid;
  var_api_key text;
  var_api_key_hash text;
begin
  -- generate a random api key with prefix
  var_api_key := 'sdk_' || public.gen_random_alphanumeric(32);

  -- hash the api key
  var_api_key_hash := encode(extensions.digest(var_api_key, 'sha256'), 'hex');

  -- create the vault entry
  insert into vault.secrets (secret, name, description)
  values (
    var_api_key,
    'SDK_API_KEY__org__' || new.uuid,
    'SDK API Key for organization ' || new.uuid
  )
  returning id into var_new_vault_secret_id;

  -- create the organization_key entry
  insert into public.organization_keys (organization_id, key, vault_secret_id, key_hash)
  values (new.id, 'SDK_API_KEY', var_new_vault_secret_id, var_api_key_hash);

  return new;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.get_organization_by_api_key_hash(arg_api_key_hash text)
 RETURNS jsonb
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
  var_result jsonb;
begin
  -- look up organization by api key hash
  select
    jsonb_build_object(
      'organization_id', o.id,
      'organization_uuid', o.uuid,
      'user_id', au.id,
      'auth_user_id', au.auth_user_id,
      'email', au.email
    ) into var_result
  from public.organization_keys ok
  join public.organizations o on ok.organization_id = o.id
  join public.agentsmith_users au on o.created_by = au.id
  where ok.key_hash = arg_api_key_hash
    and ok.key = 'SDK_API_KEY';

  -- check if we found a result and raise exception if not
  if var_result is null then
    raise exception 'invalid api key';
  end if;

  return var_result;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.get_organization_vault_secret(arg_vault_secret_id uuid)
 RETURNS jsonb
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
  var_result jsonb;
  var_secret_text text;
  var_auth_uid uuid;
begin
  -- get the current authenticated user
  var_auth_uid := (select auth.uid());

  -- only return the secret if the user is a member of the organization that owns it
  select s.decrypted_secret into var_secret_text
  from vault.decrypted_secrets s
  join public.organization_keys ok on ok.vault_secret_id = s.id
  join public.organization_users ou on ou.organization_id = ok.organization_id
  join public.agentsmith_users au on ou.user_id = au.id
  where s.id = arg_vault_secret_id
    and au.auth_user_id = var_auth_uid;

  -- convert the text to jsonb - handle null case
  if var_secret_text is not null then
    var_result := jsonb_build_object('value', var_secret_text);
  end if;

  return var_result;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.has_project_access(proj_id bigint)
 RETURNS boolean
 LANGUAGE sql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
  select exists (
    select 1 from public.projects p
    join public.organization_users ou on ou.organization_id = p.organization_id
    where p.id = proj_id
    and ou.user_id = public.agentsmith_user_id()
  );
$function$
;

CREATE OR REPLACE FUNCTION public.has_prompt_access(prompt_id bigint)
 RETURNS boolean
 LANGUAGE sql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
  select exists (
    select 1 from public.prompts pr
    join public.projects p on p.id = pr.project_id
    join public.organization_users ou on ou.organization_id = p.organization_id
    where pr.id = prompt_id
    and ou.user_id = public.agentsmith_user_id()
  );
$function$
;

CREATE OR REPLACE FUNCTION public.is_member_of_same_org(agentsmith_user_id bigint)
 RETURNS boolean
 LANGUAGE sql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
select exists (
    select 1 from public.organization_users ou
    where ou.user_id = agentsmith_user_id
    and public.is_organization_member(ou.organization_id)
);
$function$
;

CREATE OR REPLACE FUNCTION public.is_organization_admin(org_id bigint)
 RETURNS boolean
 LANGUAGE sql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
  select exists (
    select 1 from public.organization_users
    where organization_id = org_id
    and user_id = public.agentsmith_user_id()
    and role = 'ADMIN'
  );
$function$
;

CREATE OR REPLACE FUNCTION public.is_organization_member(org_id bigint)
 RETURNS boolean
 LANGUAGE sql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
  select exists (
    select 1 from public.organization_users ou
    where ou.organization_id = org_id
    and ou.user_id = public.agentsmith_user_id()
  );
$function$
;

CREATE OR REPLACE FUNCTION public.join_organization(arg_invite_code text)
 RETURNS uuid
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
  var_organization_uuid uuid;
  var_organization_id bigint;
begin
    -- get the organization id, and the uuid from the invite code
    select id, uuid into var_organization_id, var_organization_uuid
    from public.organizations
    where invite_code = arg_invite_code;

    -- verify the organization exists
    if var_organization_id is null then
        raise exception 'Organization not found';
    end if;

    -- verify the user is not already a member of the organization
    if exists (select 1 from public.organization_users ou
        where ou.organization_id = var_organization_id
        and ou.user_id = public.agentsmith_user_id())
    then
        raise exception 'User is already a member of this organization';
    end if;

    -- add the user to the organization
    insert into public.organization_users (organization_id, user_id, role)
    values (var_organization_id, public.agentsmith_user_id(), 'MEMBER');

    return var_organization_uuid;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.rename_organization(arg_organization_uuid uuid, arg_name text)
 RETURNS void
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
  var_organization_id bigint;
begin
    -- get the organization id from the uuid
    select id into var_organization_id
    from public.organizations
    where uuid = arg_organization_uuid;

    -- verify user is an admin of the organization
    if not public.is_organization_admin(var_organization_id) then
        raise exception 'User is not an organization admin';
    end if;

    update public.organizations
    set name = arg_name
    where id = var_organization_id;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.set_updated_at()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
begin
    new.updated_at = now();
    return new;
end;
$function$
;

grant delete on table "public"."agentsmith_users" to "anon";

grant insert on table "public"."agentsmith_users" to "anon";

grant references on table "public"."agentsmith_users" to "anon";

grant select on table "public"."agentsmith_users" to "anon";

grant trigger on table "public"."agentsmith_users" to "anon";

grant truncate on table "public"."agentsmith_users" to "anon";

grant update on table "public"."agentsmith_users" to "anon";

grant delete on table "public"."agentsmith_users" to "authenticated";

grant insert on table "public"."agentsmith_users" to "authenticated";

grant references on table "public"."agentsmith_users" to "authenticated";

grant select on table "public"."agentsmith_users" to "authenticated";

grant trigger on table "public"."agentsmith_users" to "authenticated";

grant truncate on table "public"."agentsmith_users" to "authenticated";

grant update on table "public"."agentsmith_users" to "authenticated";

grant delete on table "public"."agentsmith_users" to "service_role";

grant insert on table "public"."agentsmith_users" to "service_role";

grant references on table "public"."agentsmith_users" to "service_role";

grant select on table "public"."agentsmith_users" to "service_role";

grant trigger on table "public"."agentsmith_users" to "service_role";

grant truncate on table "public"."agentsmith_users" to "service_role";

grant update on table "public"."agentsmith_users" to "service_role";

grant delete on table "public"."github_app_installations" to "anon";

grant insert on table "public"."github_app_installations" to "anon";

grant references on table "public"."github_app_installations" to "anon";

grant select on table "public"."github_app_installations" to "anon";

grant trigger on table "public"."github_app_installations" to "anon";

grant truncate on table "public"."github_app_installations" to "anon";

grant update on table "public"."github_app_installations" to "anon";

grant delete on table "public"."github_app_installations" to "authenticated";

grant insert on table "public"."github_app_installations" to "authenticated";

grant references on table "public"."github_app_installations" to "authenticated";

grant select on table "public"."github_app_installations" to "authenticated";

grant trigger on table "public"."github_app_installations" to "authenticated";

grant truncate on table "public"."github_app_installations" to "authenticated";

grant update on table "public"."github_app_installations" to "authenticated";

grant delete on table "public"."github_app_installations" to "service_role";

grant insert on table "public"."github_app_installations" to "service_role";

grant references on table "public"."github_app_installations" to "service_role";

grant select on table "public"."github_app_installations" to "service_role";

grant trigger on table "public"."github_app_installations" to "service_role";

grant truncate on table "public"."github_app_installations" to "service_role";

grant update on table "public"."github_app_installations" to "service_role";

grant delete on table "public"."global_contexts" to "anon";

grant insert on table "public"."global_contexts" to "anon";

grant references on table "public"."global_contexts" to "anon";

grant select on table "public"."global_contexts" to "anon";

grant trigger on table "public"."global_contexts" to "anon";

grant truncate on table "public"."global_contexts" to "anon";

grant update on table "public"."global_contexts" to "anon";

grant delete on table "public"."global_contexts" to "authenticated";

grant insert on table "public"."global_contexts" to "authenticated";

grant references on table "public"."global_contexts" to "authenticated";

grant select on table "public"."global_contexts" to "authenticated";

grant trigger on table "public"."global_contexts" to "authenticated";

grant truncate on table "public"."global_contexts" to "authenticated";

grant update on table "public"."global_contexts" to "authenticated";

grant delete on table "public"."global_contexts" to "service_role";

grant insert on table "public"."global_contexts" to "service_role";

grant references on table "public"."global_contexts" to "service_role";

grant select on table "public"."global_contexts" to "service_role";

grant trigger on table "public"."global_contexts" to "service_role";

grant truncate on table "public"."global_contexts" to "service_role";

grant update on table "public"."global_contexts" to "service_role";

grant delete on table "public"."llm_logs" to "anon";

grant insert on table "public"."llm_logs" to "anon";

grant references on table "public"."llm_logs" to "anon";

grant select on table "public"."llm_logs" to "anon";

grant trigger on table "public"."llm_logs" to "anon";

grant truncate on table "public"."llm_logs" to "anon";

grant update on table "public"."llm_logs" to "anon";

grant delete on table "public"."llm_logs" to "authenticated";

grant insert on table "public"."llm_logs" to "authenticated";

grant references on table "public"."llm_logs" to "authenticated";

grant select on table "public"."llm_logs" to "authenticated";

grant trigger on table "public"."llm_logs" to "authenticated";

grant truncate on table "public"."llm_logs" to "authenticated";

grant update on table "public"."llm_logs" to "authenticated";

grant delete on table "public"."llm_logs" to "service_role";

grant insert on table "public"."llm_logs" to "service_role";

grant references on table "public"."llm_logs" to "service_role";

grant select on table "public"."llm_logs" to "service_role";

grant trigger on table "public"."llm_logs" to "service_role";

grant truncate on table "public"."llm_logs" to "service_role";

grant update on table "public"."llm_logs" to "service_role";

grant delete on table "public"."organization_keys" to "anon";

grant insert on table "public"."organization_keys" to "anon";

grant references on table "public"."organization_keys" to "anon";

grant select on table "public"."organization_keys" to "anon";

grant trigger on table "public"."organization_keys" to "anon";

grant truncate on table "public"."organization_keys" to "anon";

grant update on table "public"."organization_keys" to "anon";

grant delete on table "public"."organization_keys" to "authenticated";

grant insert on table "public"."organization_keys" to "authenticated";

grant references on table "public"."organization_keys" to "authenticated";

grant select on table "public"."organization_keys" to "authenticated";

grant trigger on table "public"."organization_keys" to "authenticated";

grant truncate on table "public"."organization_keys" to "authenticated";

grant update on table "public"."organization_keys" to "authenticated";

grant delete on table "public"."organization_keys" to "service_role";

grant insert on table "public"."organization_keys" to "service_role";

grant references on table "public"."organization_keys" to "service_role";

grant select on table "public"."organization_keys" to "service_role";

grant trigger on table "public"."organization_keys" to "service_role";

grant truncate on table "public"."organization_keys" to "service_role";

grant update on table "public"."organization_keys" to "service_role";

grant delete on table "public"."organization_users" to "anon";

grant insert on table "public"."organization_users" to "anon";

grant references on table "public"."organization_users" to "anon";

grant select on table "public"."organization_users" to "anon";

grant trigger on table "public"."organization_users" to "anon";

grant truncate on table "public"."organization_users" to "anon";

grant update on table "public"."organization_users" to "anon";

grant delete on table "public"."organization_users" to "authenticated";

grant insert on table "public"."organization_users" to "authenticated";

grant references on table "public"."organization_users" to "authenticated";

grant select on table "public"."organization_users" to "authenticated";

grant trigger on table "public"."organization_users" to "authenticated";

grant truncate on table "public"."organization_users" to "authenticated";

grant update on table "public"."organization_users" to "authenticated";

grant delete on table "public"."organization_users" to "service_role";

grant insert on table "public"."organization_users" to "service_role";

grant references on table "public"."organization_users" to "service_role";

grant select on table "public"."organization_users" to "service_role";

grant trigger on table "public"."organization_users" to "service_role";

grant truncate on table "public"."organization_users" to "service_role";

grant update on table "public"."organization_users" to "service_role";

grant delete on table "public"."organizations" to "anon";

grant insert on table "public"."organizations" to "anon";

grant references on table "public"."organizations" to "anon";

grant select on table "public"."organizations" to "anon";

grant trigger on table "public"."organizations" to "anon";

grant truncate on table "public"."organizations" to "anon";

grant update on table "public"."organizations" to "anon";

grant delete on table "public"."organizations" to "authenticated";

grant insert on table "public"."organizations" to "authenticated";

grant references on table "public"."organizations" to "authenticated";

grant select on table "public"."organizations" to "authenticated";

grant trigger on table "public"."organizations" to "authenticated";

grant truncate on table "public"."organizations" to "authenticated";

grant update on table "public"."organizations" to "authenticated";

grant delete on table "public"."organizations" to "service_role";

grant insert on table "public"."organizations" to "service_role";

grant references on table "public"."organizations" to "service_role";

grant select on table "public"."organizations" to "service_role";

grant trigger on table "public"."organizations" to "service_role";

grant truncate on table "public"."organizations" to "service_role";

grant update on table "public"."organizations" to "service_role";

grant delete on table "public"."project_repositories" to "anon";

grant insert on table "public"."project_repositories" to "anon";

grant references on table "public"."project_repositories" to "anon";

grant select on table "public"."project_repositories" to "anon";

grant trigger on table "public"."project_repositories" to "anon";

grant truncate on table "public"."project_repositories" to "anon";

grant update on table "public"."project_repositories" to "anon";

grant delete on table "public"."project_repositories" to "authenticated";

grant insert on table "public"."project_repositories" to "authenticated";

grant references on table "public"."project_repositories" to "authenticated";

grant select on table "public"."project_repositories" to "authenticated";

grant trigger on table "public"."project_repositories" to "authenticated";

grant truncate on table "public"."project_repositories" to "authenticated";

grant update on table "public"."project_repositories" to "authenticated";

grant delete on table "public"."project_repositories" to "service_role";

grant insert on table "public"."project_repositories" to "service_role";

grant references on table "public"."project_repositories" to "service_role";

grant select on table "public"."project_repositories" to "service_role";

grant trigger on table "public"."project_repositories" to "service_role";

grant truncate on table "public"."project_repositories" to "service_role";

grant update on table "public"."project_repositories" to "service_role";

grant delete on table "public"."projects" to "anon";

grant insert on table "public"."projects" to "anon";

grant references on table "public"."projects" to "anon";

grant select on table "public"."projects" to "anon";

grant trigger on table "public"."projects" to "anon";

grant truncate on table "public"."projects" to "anon";

grant update on table "public"."projects" to "anon";

grant delete on table "public"."projects" to "authenticated";

grant insert on table "public"."projects" to "authenticated";

grant references on table "public"."projects" to "authenticated";

grant select on table "public"."projects" to "authenticated";

grant trigger on table "public"."projects" to "authenticated";

grant truncate on table "public"."projects" to "authenticated";

grant update on table "public"."projects" to "authenticated";

grant delete on table "public"."projects" to "service_role";

grant insert on table "public"."projects" to "service_role";

grant references on table "public"."projects" to "service_role";

grant select on table "public"."projects" to "service_role";

grant trigger on table "public"."projects" to "service_role";

grant truncate on table "public"."projects" to "service_role";

grant update on table "public"."projects" to "service_role";

grant delete on table "public"."prompt_variables" to "anon";

grant insert on table "public"."prompt_variables" to "anon";

grant references on table "public"."prompt_variables" to "anon";

grant select on table "public"."prompt_variables" to "anon";

grant trigger on table "public"."prompt_variables" to "anon";

grant truncate on table "public"."prompt_variables" to "anon";

grant update on table "public"."prompt_variables" to "anon";

grant delete on table "public"."prompt_variables" to "authenticated";

grant insert on table "public"."prompt_variables" to "authenticated";

grant references on table "public"."prompt_variables" to "authenticated";

grant select on table "public"."prompt_variables" to "authenticated";

grant trigger on table "public"."prompt_variables" to "authenticated";

grant truncate on table "public"."prompt_variables" to "authenticated";

grant update on table "public"."prompt_variables" to "authenticated";

grant delete on table "public"."prompt_variables" to "service_role";

grant insert on table "public"."prompt_variables" to "service_role";

grant references on table "public"."prompt_variables" to "service_role";

grant select on table "public"."prompt_variables" to "service_role";

grant trigger on table "public"."prompt_variables" to "service_role";

grant truncate on table "public"."prompt_variables" to "service_role";

grant update on table "public"."prompt_variables" to "service_role";

grant delete on table "public"."prompt_versions" to "anon";

grant insert on table "public"."prompt_versions" to "anon";

grant references on table "public"."prompt_versions" to "anon";

grant select on table "public"."prompt_versions" to "anon";

grant trigger on table "public"."prompt_versions" to "anon";

grant truncate on table "public"."prompt_versions" to "anon";

grant update on table "public"."prompt_versions" to "anon";

grant delete on table "public"."prompt_versions" to "authenticated";

grant insert on table "public"."prompt_versions" to "authenticated";

grant references on table "public"."prompt_versions" to "authenticated";

grant select on table "public"."prompt_versions" to "authenticated";

grant trigger on table "public"."prompt_versions" to "authenticated";

grant truncate on table "public"."prompt_versions" to "authenticated";

grant update on table "public"."prompt_versions" to "authenticated";

grant delete on table "public"."prompt_versions" to "service_role";

grant insert on table "public"."prompt_versions" to "service_role";

grant references on table "public"."prompt_versions" to "service_role";

grant select on table "public"."prompt_versions" to "service_role";

grant trigger on table "public"."prompt_versions" to "service_role";

grant truncate on table "public"."prompt_versions" to "service_role";

grant update on table "public"."prompt_versions" to "service_role";

grant delete on table "public"."prompts" to "anon";

grant insert on table "public"."prompts" to "anon";

grant references on table "public"."prompts" to "anon";

grant select on table "public"."prompts" to "anon";

grant trigger on table "public"."prompts" to "anon";

grant truncate on table "public"."prompts" to "anon";

grant update on table "public"."prompts" to "anon";

grant delete on table "public"."prompts" to "authenticated";

grant insert on table "public"."prompts" to "authenticated";

grant references on table "public"."prompts" to "authenticated";

grant select on table "public"."prompts" to "authenticated";

grant trigger on table "public"."prompts" to "authenticated";

grant truncate on table "public"."prompts" to "authenticated";

grant update on table "public"."prompts" to "authenticated";

grant delete on table "public"."prompts" to "service_role";

grant insert on table "public"."prompts" to "service_role";

grant references on table "public"."prompts" to "service_role";

grant select on table "public"."prompts" to "service_role";

grant trigger on table "public"."prompts" to "service_role";

grant truncate on table "public"."prompts" to "service_role";

grant update on table "public"."prompts" to "service_role";

create policy "Users can view agentsmith_users records if they are in the same"
on "public"."agentsmith_users"
as permissive
for select
to authenticated
using (is_member_of_same_org(id));


create policy "Users can view their own record"
on "public"."agentsmith_users"
as permissive
for select
to authenticated
using ((auth_user_id = ( SELECT auth.uid() AS uid)));


create policy "Organization admins can create github app installations for the"
on "public"."github_app_installations"
as permissive
for insert
to authenticated
with check (is_organization_admin(organization_id));


create policy "Organization admins can delete github app installations for the"
on "public"."github_app_installations"
as permissive
for delete
to authenticated
using (is_organization_admin(organization_id));


create policy "Organization admins can update github app installations for the"
on "public"."github_app_installations"
as permissive
for update
to authenticated
using (is_organization_admin(organization_id));


create policy "Users can view github app installations they have access to"
on "public"."github_app_installations"
as permissive
for select
to authenticated
using (is_organization_member(organization_id));


create policy "Admins can delete global contexts they have access to"
on "public"."global_contexts"
as permissive
for delete
to authenticated
using ((has_project_access(project_id) AND is_organization_admin(( SELECT projects.organization_id
   FROM projects
  WHERE (projects.id = global_contexts.project_id)))));


create policy "Users can update global contexts they have access to"
on "public"."global_contexts"
as permissive
for update
to authenticated
using (has_project_access(project_id));


create policy "Users can view global contexts they have access to"
on "public"."global_contexts"
as permissive
for select
to authenticated
using (has_project_access(project_id));


create policy "llm_logs_project_access_policy"
on "public"."llm_logs"
as permissive
for select
to authenticated
using (has_project_access(project_id));


create policy "llm_logs_project_delete_policy"
on "public"."llm_logs"
as permissive
for delete
to authenticated
using (false);


create policy "llm_logs_project_insert_policy"
on "public"."llm_logs"
as permissive
for insert
to authenticated
with check (has_project_access(project_id));


create policy "llm_logs_project_update_policy"
on "public"."llm_logs"
as permissive
for update
to authenticated
using (has_project_access(project_id))
with check (has_project_access(project_id));


create policy "Organization admins can create organization keys"
on "public"."organization_keys"
as permissive
for insert
to authenticated
with check (is_organization_admin(organization_id));


create policy "Organization admins can delete organization keys"
on "public"."organization_keys"
as permissive
for delete
to authenticated
using (is_organization_admin(organization_id));


create policy "Organization members can view organization keys"
on "public"."organization_keys"
as permissive
for select
to authenticated
using (is_organization_member(organization_id));


create policy "Users can view organization members if they are a member"
on "public"."organization_users"
as permissive
for select
to authenticated
using (is_organization_member(organization_id));


create policy "organization users delete"
on "public"."organization_users"
as permissive
for delete
to authenticated
using (is_organization_admin(organization_id));


create policy "organization users insert"
on "public"."organization_users"
as permissive
for insert
to authenticated
with check (is_organization_admin(organization_id));


create policy "organization users select"
on "public"."organization_users"
as permissive
for select
to authenticated
using (is_organization_member(organization_id));


create policy "organization users update"
on "public"."organization_users"
as permissive
for update
to authenticated
using (is_organization_admin(organization_id));


create policy "Users can view organizations they are members of"
on "public"."organizations"
as permissive
for select
to authenticated
using (is_organization_member(id));


create policy "Organization admins can create project repositories for their o"
on "public"."project_repositories"
as permissive
for insert
to authenticated
with check (is_organization_admin(organization_id));


create policy "Organization admins can delete project repositories they have a"
on "public"."project_repositories"
as permissive
for delete
to authenticated
using (is_organization_admin(organization_id));


create policy "Organization admins can update project repositories they have a"
on "public"."project_repositories"
as permissive
for update
to authenticated
using (is_organization_admin(organization_id));


create policy "Users can view project repositories they have access to"
on "public"."project_repositories"
as permissive
for select
to authenticated
using (has_project_access(project_id));


create policy "Organization admins can create projects"
on "public"."projects"
as permissive
for insert
to authenticated
with check (is_organization_admin(organization_id));


create policy "Organization admins can delete projects"
on "public"."projects"
as permissive
for delete
to authenticated
using (is_organization_admin(organization_id));


create policy "Organization admins can update projects"
on "public"."projects"
as permissive
for update
to authenticated
using (is_organization_admin(organization_id));


create policy "Users can view projects they have access to"
on "public"."projects"
as permissive
for select
to authenticated
using (has_project_access(id));


create policy "Users can create prompt variables they have access to"
on "public"."prompt_variables"
as permissive
for insert
to authenticated
with check ((EXISTS ( SELECT 1
   FROM prompt_versions pv
  WHERE ((pv.id = prompt_variables.prompt_version_id) AND has_prompt_access(pv.prompt_id)))));


create policy "Users can delete prompt variables they have access to"
on "public"."prompt_variables"
as permissive
for delete
to authenticated
using ((EXISTS ( SELECT 1
   FROM prompt_versions pv
  WHERE ((pv.id = prompt_variables.prompt_version_id) AND has_prompt_access(pv.prompt_id)))));


create policy "Users can update prompt variables they have access to"
on "public"."prompt_variables"
as permissive
for update
to authenticated
using ((EXISTS ( SELECT 1
   FROM prompt_versions pv
  WHERE ((pv.id = prompt_variables.prompt_version_id) AND has_prompt_access(pv.prompt_id)))));


create policy "Users can view prompt variables they have access to"
on "public"."prompt_variables"
as permissive
for select
to authenticated
using ((EXISTS ( SELECT 1
   FROM prompt_versions pv
  WHERE ((pv.id = prompt_variables.prompt_version_id) AND has_prompt_access(pv.prompt_id)))));


create policy "Users can create prompt versions they have access to"
on "public"."prompt_versions"
as permissive
for insert
to authenticated
with check (has_prompt_access(prompt_id));


create policy "Users can delete prompt versions they have access to"
on "public"."prompt_versions"
as permissive
for delete
to authenticated
using (has_prompt_access(prompt_id));


create policy "Users can update prompt versions they have access to"
on "public"."prompt_versions"
as permissive
for update
to authenticated
using (has_prompt_access(prompt_id));


create policy "Users can view prompt versions they have access to"
on "public"."prompt_versions"
as permissive
for select
to authenticated
using (has_prompt_access(prompt_id));


create policy "Users can create prompts in projects they have access to"
on "public"."prompts"
as permissive
for insert
to authenticated
with check (has_project_access(project_id));


create policy "Users can delete prompts they have access to"
on "public"."prompts"
as permissive
for delete
to authenticated
using (has_project_access(project_id));


create policy "Users can update prompts they have access to"
on "public"."prompts"
as permissive
for update
to authenticated
using (has_project_access(project_id));


create policy "Users can view prompts they have access to"
on "public"."prompts"
as permissive
for select
to authenticated
using (has_project_access(project_id));


CREATE TRIGGER trigger_updated_at_agentsmith_users BEFORE UPDATE ON public.agentsmith_users FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trigger_updated_at_github_app_installations BEFORE UPDATE ON public.github_app_installations FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trigger_updated_at_global_contexts BEFORE UPDATE ON public.global_contexts FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trigger_updated_at_llm_logs BEFORE UPDATE ON public.llm_logs FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trigger_updated_at_organization_keys BEFORE UPDATE ON public.organization_keys FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trigger_updated_at_organization_users BEFORE UPDATE ON public.organization_users FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trigger_generate_api_key AFTER INSERT ON public.organizations FOR EACH ROW EXECUTE FUNCTION generate_organization_api_key();

CREATE TRIGGER trigger_updated_at_organizations BEFORE UPDATE ON public.organizations FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trigger_updated_at_project_repositories BEFORE UPDATE ON public.project_repositories FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trigger_updated_at_projects BEFORE UPDATE ON public.projects FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trigger_updated_at_prompt_variables BEFORE UPDATE ON public.prompt_variables FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trigger_updated_at_prompt_versions BEFORE UPDATE ON public.prompt_versions FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trigger_updated_at_prompts BEFORE UPDATE ON public.prompts FOR EACH ROW EXECUTE FUNCTION set_updated_at();
