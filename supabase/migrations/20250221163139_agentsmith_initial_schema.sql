-- Functions
create or replace function set_updated_at()
returns trigger as $$
begin
    new.updated_at = now();
    return new;
end;
$$ language plpgsql;

-- Enums
create type organization_tier as enum ('FREE', 'PRO', 'ENTERPRISE');
create type prompt_status as enum ('DRAFT', 'PUBLISHED', 'ARCHIVED');
create type variable_type as enum ('STRING', 'NUMBER', 'BOOLEAN');

-- Organizations
create table organizations (
    id bigint generated by default as identity not null primary key,
    name text not null,
    tier organization_tier not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create index on organizations(tier);
create index on organizations(created_at);
create index on organizations(updated_at);

create trigger trigger_updated_at_organizations
    before update on organizations
    for each row
    execute function set_updated_at();

-- Agentsmith Users
create table agentsmith_users (
    id bigint generated by default as identity not null primary key,
    auth_user_id bigint references auth.users(id) not null,
    organization_id bigint references organizations(id),
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create index on agentsmith_users(auth_user_id);
create index on agentsmith_users(organization_id);
create index on agentsmith_users(created_at);
create index on agentsmith_users(updated_at);

create trigger trigger_updated_at_agentsmith_users
    before update on agentsmith_users
    for each row
    execute function set_updated_at();

-- Auto-create agentsmith_users record when auth.users record is created
create or replace function create_agentsmith_user()
returns trigger as $$
begin
    insert into agentsmith_users (auth_user_id)
    values (new.id);
    return new;
end;
$$ language plpgsql;

create trigger trigger_create_agentsmith_user
    after insert on auth.users
    for each row
    execute function create_agentsmith_user();

-- Projects
create table projects (
    id bigint generated by default as identity not null primary key,
    name text not null,
    organization_id bigint references organizations(id),
    created_by bigint references agentsmith_users(id),
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create index on projects(organization_id);
create index on projects(created_by);
create index on projects(created_at);

create trigger trigger_updated_at_projects
    before update on projects
    for each row
    execute function set_updated_at();

-- User Keys
create table user_keys (
    id bigint generated by default as identity not null primary key,
    user_id bigint references agentsmith_users(id),
    key text not null,
    vault_id bigint references vault.secrets(id),
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create index on user_keys(user_id);
create index on user_keys(vault_id);
create index on user_keys(created_at);
create index on user_keys(updated_at);

create trigger trigger_updated_at_user_keys
    before update on user_keys
    for each row
    execute function set_updated_at();

-- Global Contexts
create table global_contexts (
    id bigint generated by default as identity not null primary key,
    project_id bigint references projects(id),
    content jsonb not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create index on global_contexts(project_id);
create index on global_contexts(created_at);
create index on global_contexts(updated_at);

create trigger trigger_updated_at_global_contexts
    before update on global_contexts
    for each row
    execute function set_updated_at();

-- Prompts
create table prompts (
    id bigint generated by default as identity not null primary key,
    project_id bigint references projects(id),
    name text not null,
    slug text not null,
    current_version_id bigint references prompt_versions(id),
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create index on prompts(project_id);
create index on prompts(current_version_id);
create index on prompts(created_at);
create index on prompts(updated_at);

create trigger trigger_updated_at_prompts
    before update on prompts
    for each row
    execute function set_updated_at();

-- Prompt Versions
create table prompt_versions (
    id bigint generated by default as identity not null primary key,
    prompt_id bigint references prompts(id),
    model text not null,
    content jsonb not null,
    version text not null,
    status prompt_status not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create index on prompt_versions(model);
create index on prompt_versions(prompt_id);
create index on prompt_versions(created_at);
create index on prompt_versions(updated_at);

create trigger trigger_updated_at_prompt_versions
    before update on prompt_versions
    for each row
    execute function set_updated_at();

-- Prompt Variables
create table prompt_variables (
    id bigint generated by default as identity not null primary key,
    prompt_version_id bigint references prompt_versions(id),
    name text not null,
    type variable_type not null,
    required boolean not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create index on prompt_variables(prompt_version_id);

create trigger trigger_updated_at_prompt_variables
    before update on prompt_variables
    for each row
    execute function set_updated_at();

create extension if not exists timescaledb;

-- LLM Logs (TimescaleDB Table)
create table llm_logs (
    id bigint generated by default as identity not null primary key,
    project_id bigint references projects(id) not null,
    prompt_version_id bigint references prompt_versions(id) not null,
    prompt_variables jsonb not null,
    raw_input jsonb not null,
    raw_output jsonb,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

select create_hypertable('llm_logs', 'created_at');

create index on llm_logs(project_id);
create index on llm_logs(prompt_version_id);

create trigger trigger_updated_at_llm_logs
    before update on llm_logs
    for each row
    execute function set_updated_at();