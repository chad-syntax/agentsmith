-- Remove the existing 'tier' column from the organizations table
alter table organizations drop column if exists tier;

drop type if exists organization_tier;

create type organization_tier as enum ('FREE', 'HOBBY', 'PRO', 'ENTERPRISE');

create table if not exists agentsmith_tiers (
    id bigint generated by default as identity not null primary key,
    tier organization_tier not null unique,
    name text not null,
    stripe_product_id text,
    prompt_limit integer not null,
    user_limit integer not null,
    project_limit integer not null,
    llm_logs_limit integer not null,
    llm_logs_retention_days integer not null,
    metrics_page_access boolean not null default false
);

create index on agentsmith_tiers(tier);
create index on agentsmith_tiers(stripe_product_id);

-- Add the 'agentsmith_tier_id' column referencing agentsmith_tiers(id)
alter table organizations
    add column if not exists agentsmith_tier_id bigint references agentsmith_tiers(id) not null default 1,
    add column if not exists stripe_customer_id text,
    add column if not exists stripe_subscription_id text,
    add column if not exists stripe_subscription_item_id text,
    add column if not exists seat_count integer not null default 1;

create index on organizations(agentsmith_tier_id);
create index on organizations(stripe_customer_id);
create index on organizations(stripe_subscription_id);
create index on organizations(stripe_subscription_item_id);

insert into agentsmith_tiers (tier, name, prompt_limit, user_limit, project_limit, llm_logs_limit, llm_logs_retention_days, metrics_page_access)
values
  ('FREE', 'Free', 5, 1, 1, 1000, 7, false),
  ('HOBBY', 'Hobby', 100, 3, 3, 30000, 90, true),
  ('PRO', 'Pro', 9999, 9999, 10, 100000, 365, true),
  ('ENTERPRISE', 'Enterprise', 9999, 9999, 100, 1000000, 999999, true);

-- add or update RLS policies to enforce the new constraints

-- Helper function to check if the organization for a given project is under or at its prompt limit (inclusive)
create or replace function is_under_prompt_limit(arg_project_id bigint)
returns boolean
language sql
security definer
set search_path = ''
as $$
    with org as (
        select pr.organization_id
        from public.projects pr
        where pr.id = arg_project_id
    ),
    prompt_limit as (
        select coalesce(t.prompt_limit, 10) as limit
        from public.organizations o
        left join public.agentsmith_tiers t on t.id = o.agentsmith_tier_id
        where o.id = (select organization_id from org)
    ),
    prompt_count as (
        select count(*) as count
        from public.prompts p
        where p.project_id = arg_project_id
    )
    select prompt_count.count < prompt_limit.limit
    from prompt_count, prompt_limit;
$$;

-- This RESTRICTIVE policy acts as a global rule. It does not grant access on its own,
-- but it ensures that any insert, already permitted by a PERMISSIVE policy,
-- must also be under the organization's prompt limit.
create policy "Enforce prompt limit for organization tier"
on prompts
as restrictive
for insert
to authenticated
with check (
    is_under_prompt_limit(prompts.project_id)
);


-- Helper function to check if the organization is under or at its user limit (inclusive)
create or replace function is_under_user_limit(arg_organization_id bigint)
returns boolean
language sql
security definer
set search_path = ''
as $$
    with user_limit as (
        select 
            coalesce(t.user_limit, 1) as tier_limit,
            coalesce(o.seat_count, 1) as seat_limit
        from public.organizations o
        left join public.agentsmith_tiers t on t.id = o.agentsmith_tier_id
        where o.id = arg_organization_id
    ),
    user_count as (
        select count(*) as count
        from public.organization_users ou
        where ou.organization_id = arg_organization_id
    )
    select 
        user_count.count < least(user_limit.tier_limit, user_limit.seat_limit)
    from user_count, user_limit;
$$;

-- This RESTRICTIVE policy ensures any user being added to an organization
-- does not exceed the tier's user limit.
create policy "Enforce user limit for organization tier"
on organization_users
as restrictive
for insert
to authenticated
with check (
    is_under_user_limit(organization_users.organization_id)
);

-- Helper function to check if the organization is under or at its project limit (inclusive)
create or replace function is_under_project_limit(arg_organization_id bigint)
returns boolean
language sql
security definer
set search_path = ''
as $$
    with project_limit as (
        select coalesce(t.project_limit, 1) as limit
        from public.organizations o
        left join public.agentsmith_tiers t on t.id = o.agentsmith_tier_id
        where o.id = arg_organization_id
    ),
    project_count as (
        select count(*) as count
        from public.projects p
        where p.organization_id = arg_organization_id
    )
    select project_count.count < project_limit.limit
    from project_count, project_limit;
$$;

-- This RESTRICTIVE policy ensures any new project created
-- does not exceed the tier's project limit.
create policy "Enforce project limit for organization tier"
on projects
as restrictive
for insert
to authenticated
with check (
    is_under_project_limit(projects.organization_id)
);

-- fix for the project insert issue, we need to alter the select policy
alter policy "Users can view projects they have access to" on projects
    using (is_organization_member(organization_id));

-- Helper function to check if the organization is under or at its llm_logs limit (inclusive)
create or replace function is_under_llm_logs_limit(arg_project_id bigint)
returns boolean
language sql
security definer
set search_path = ''
as $$
with org as (
    select organization_id
    from public.projects
    where id = arg_project_id
),
llm_logs_limit as (
    select coalesce(t.llm_logs_limit, 1000) as limit
    from public.organizations o
    left join public.agentsmith_tiers t on t.id = o.agentsmith_tier_id
    where o.id = (select organization_id from org)
),
llm_logs_count as (
    select count(*) as count
    from public.llm_logs l
    where l.project_id = arg_project_id
)
select llm_logs_count.count < llm_logs_limit.limit
from llm_logs_count, llm_logs_limit;
$$;

-- This RESTRICTIVE policy ensures any new LLM log entry
-- does not exceed the tier's log limit.
create policy "Enforce llm_logs limit for organization tier"
on llm_logs
as restrictive
for insert
to authenticated
with check (
    is_under_llm_logs_limit(llm_logs.project_id)
);

-- replace the create_agentsmith_user function so that we don't create any defaults
create or replace function create_agentsmith_user()
returns trigger
language plpgsql
security definer
set search_path = ''
as $$
declare
  var_agentsmith_user_id bigint;
  var_organization_id bigint;
begin
    -- create the agentsmith_users record
    insert into public.agentsmith_users (auth_user_id, email)
    values (new.id, new.email)
    returning id into var_agentsmith_user_id;

    return new;
end;
$$;

create or replace function join_organization(arg_invite_code text)
returns uuid
language plpgsql
security definer
set search_path = ''
as $$
declare
  var_organization_uuid uuid;
  var_organization_id bigint;
begin
    -- get the organization id, and the uuid from the invite code
    select id, uuid into var_organization_id, var_organization_uuid
    from public.organizations
    where invite_code = arg_invite_code;

    -- verify the organization exists
    if var_organization_id is null then
        raise exception 'Organization not found';
    end if;

    -- verify the user is not already a member of the organization
    if exists (select 1 from public.organization_users ou
        where ou.organization_id = var_organization_id
        and ou.user_id = public.agentsmith_user_id())
    then
        raise exception 'User is already a member of this organization';
    end if;

    -- check if the organization is under the user limit
    if not public.is_under_user_limit(var_organization_id) then
        raise exception 'Organization reached user limit';
    end if;

    -- add the user to the organization
    insert into public.organization_users (organization_id, user_id, role)
    values (var_organization_id, public.agentsmith_user_id(), 'MEMBER');

    return var_organization_uuid;
end;
$$;