create extension if not exists pg_net;

create schema agentsmith;

create table agentsmith.env_vars (
  id bigint generated by default as identity not null primary key,
  key text not null,
  value text not null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

alter table agentsmith.env_vars enable row level security;

create index idx_env_vars_key on agentsmith.env_vars(key);

create trigger trigger_updated_at_env_vars before update on agentsmith.env_vars for each row execute function set_updated_at();

create or replace function agentsmith.new_user_slack_webhook()
returns trigger
language plpgsql
security definer
set search_path = ''
as $$
declare
  var_app_env text;
  var_webhook_url text;
  var_payload jsonb;
begin
  -- Check if we have the required environment variables
  select value into var_app_env from agentsmith.env_vars where key = 'APP_ENV';
  select value into var_webhook_url from agentsmith.env_vars where key = 'NEW_USER_SLACK_WEBHOOK_URL';
  
  -- If either environment variable is missing, return early
  if var_app_env is null or var_webhook_url is null then
    return new;
  end if;
  
  -- Construct the Slack payload
  var_payload := jsonb_build_object(
    'text', format('`[%s]` *New User:* <mailto:%s|%s>', var_app_env, new.email, new.email)
  );
  
  -- Send the webhook request
  perform net.http_post(
    url := var_webhook_url,
    headers := '{"Content-Type": "application/json"}'::jsonb,
    body := var_payload
  );
  
  return new;
end;
$$;


create trigger new_user_slack_webhook after insert on auth.users for each row execute function agentsmith.new_user_slack_webhook();