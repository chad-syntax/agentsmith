'use server';

import { Project } from 'ts-morph';
import { __DUMMY_PROMPTS__, __DUMMY_AGENTS__ } from '@/app/constants';

export async function generateTypes() {
  // Initialize project and create source file
  const project = new Project();
  const sourceFile = project.createSourceFile('agentsmith.types.ts', '', {
    overwrite: true,
  });

  // Add generated file header
  sourceFile.addStatements([
    '// ⚡️ Generated by AgentSmith ⚡️',
    '// ⚠️ Do not edit this file directly ⚠️',
    '',
  ]);

  // Add PromptSlug type
  const promptSlugs = Object.values(__DUMMY_PROMPTS__)
    .map((p) => `'${p.slug}'`)
    .join(' | ');

  sourceFile.addTypeAlias({
    name: 'PromptSlug',
    isExported: true,
    type: promptSlugs,
  });

  // Add Prompt type
  sourceFile.addTypeAlias({
    name: 'Prompt',
    isExported: true,
    type: `{
      id: string;
      name: string;
      content: string;
      version: string;
      variables: PromptVariable[];
      slug: PromptSlug;
    }`,
  });

  // Add PromptVariable type
  sourceFile.addTypeAlias({
    name: 'PromptVariable',
    isExported: true,
    type: `{
      name: string;
      type: 'string' | 'number' | 'boolean';
      required: boolean;
    }`,
  });

  // Add AgentAction type
  sourceFile.addTypeAlias({
    name: 'AgentAction',
    isExported: true,
    type: `{
      id: string;
      name: string;
      slug: string;
      prompt_id: string;
    }`,
  });

  // Add AgentTriggers const and type
  sourceFile.addTypeAlias({
    name: 'AGENT_TRIGGERS',
    isExported: true,
    type: `{
      AFTER_ANY_MESSAGE: 'AFTER_ANY_MESSAGE';
      BEFORE_ANY_MESSAGE: 'BEFORE_ANY_MESSAGE';
      AFTER_USER_MESSAGE: 'AFTER_USER_MESSAGE';
      AFTER_ASSISTANT_MESSAGE: 'AFTER_ASSISTANT_MESSAGE';
      BEFORE_USER_MESSAGE: 'BEFORE_USER_MESSAGE';
      BEFORE_ASSISTANT_MESSAGE: 'BEFORE_ASSISTANT_MESSAGE';
      BEFORE_INSTANCE_CLEANUP: 'BEFORE_INSTANCE_CLEANUP';
      CRON_SCHEDULE: 'CRON_SCHEDULE';
    }`,
  });

  sourceFile.addTypeAlias({
    name: 'AgentTriggers',
    isExported: true,
    type: 'keyof AGENT_TRIGGERS',
  });

  // Add AgentTrigger type
  sourceFile.addTypeAlias({
    name: 'AgentTrigger',
    isExported: true,
    type: `{
      type: AgentTriggers;
      cron_schedule?: string;
    } & (
      | {
          type: 'CRON_SCHEDULE';
          cron_schedule: string;
        }
      | {
          type: Exclude<AgentTriggers, 'CRON_SCHEDULE'>;
          cron_schedule?: never;
        }
    )`,
  });

  // Add AgentReaction type
  sourceFile.addTypeAlias({
    name: 'AgentReaction',
    isExported: true,
    type: `{
      id: string;
      name: string;
      slug: string;
      prompt_id: string;
      triggers: AgentTrigger[];
    }`,
  });

  // Add Agent type
  sourceFile.addTypeAlias({
    name: 'Agent',
    isExported: true,
    type: `{
      id: string;
      name: string;
      slug: string;
      system_prompt_id: string;
      actions: AgentAction[];
      reactions: AgentReaction[];
    }`,
  });

  // Add Agency type with strict typing based on actual prompts and agents
  sourceFile.addTypeAlias({
    name: 'Agency',
    isExported: true,
    type: (writer) => {
      writer.block(() => {
        writer
          .write('prompts: ')
          .block(() => {
            Object.entries(__DUMMY_PROMPTS__).forEach(([_, prompt]) => {
              writer.write(
                `'${prompt.slug}': Prompt & { 
                  id: '${prompt.id}'; 
                  name: '${prompt.name}'; 
                  content: string;
                  version: '${prompt.version}';
                  variables: [${prompt.variables
                    .map(
                      (v) => `{ 
                    name: '${v.name}', 
                    type: '${v.type}', 
                    required: ${v.required} 
                  }`
                    )
                    .join(', ')}];
                  slug: '${prompt.slug}';
                };\n`
              );
            });
          })
          .write(';\n');
        writer.write('agents: ').block(() => {
          Object.entries(__DUMMY_AGENTS__).forEach(([_, agent]) => {
            writer.write(
              `'${agent.slug}': Agent & { 
                  id: '${agent.id}';
                  name: '${agent.name}';
                  slug: '${agent.slug}';
                  system_prompt_id: '${agent.system_prompt_id}';
                  actions: [${agent.actions
                    .map(
                      (action) => `{
                    id: '${action.id}';
                    name: '${action.name}';
                    slug: '${action.slug}';
                    prompt_id: '${action.prompt_id}';
                  }`
                    )
                    .join(', ')}];
                  reactions: [${agent.reactions
                    .map(
                      (reaction) => `{
                    id: '${reaction.id}';
                    name: '${reaction.name}';
                    slug: '${reaction.slug}';
                    prompt_id: '${reaction.prompt_id}';
                    triggers: [{ type: '${reaction.triggers[0].type}' }];
                  }`
                    )
                    .join(', ')}];
                };\n`
            );
          });
        });
      });
    },
  });

  // Format the source file
  sourceFile.formatText();

  return {
    content: sourceFile.getFullText(),
    filename: 'agentsmith.types.ts',
  };
}
